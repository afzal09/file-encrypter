import sys
import base64
import os
import hashlib
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC


class Encrypter():
    """
        This Encrypter class encrypts a text based file 
        this class constructor takes two parameters 
        first is the file to encrypt, second is the password used to encrypt
        the salt generated by this class is stored in the encrypted file at first line in the file
    """
    def __init__(self,in_file,passwd):
        self.file = open(in_file,"r")
        self.out_file = open('encrypted_file.txt','w+')
        self.password = passwd.encode("utf-8")
        self.salt = os.urandom(16)
        self.out_file.write(base64.b64encode(self.salt).decode("utf-8")+"\n")
    
    def encrypt(self):
        kdf = PBKDF2HMAC(algorithm=hashes.MD5(),length=32,salt=self.salt,iterations=4096)
        key = base64.urlsafe_b64encode(kdf.derive(self.password))
        f = Fernet(key)
        try:
            for line in self.file:
                token = f.encrypt(bytes(line,"utf-8"))
                encrypted = token.decode("utf-8")
                self.out_file.write(encrypted + "\n")
        except Exception as e:
            print('error:',e)
        finally:
            self.out_file.close()


if __name__ == '__main__':
    encrypter = Encrypter('readme.md','0000')
    encrypter.encrypt()